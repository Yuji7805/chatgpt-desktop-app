# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QTableWidgetItem, QMessageBox, QTableWidget
from PyQt5.QtCore import QSettings
from cryptography.fernet import Fernet
import sys
import pickle
def encrypt_api_key(api_key, key):
    cipher_suite = Fernet(key)
    encrypted_key = cipher_suite.encrypt(api_key.encode())
    return encrypted_key
def decrypt_api_key(encrypted_key, key):
    cipher_suite = Fernet(key)
    decrypted_key = cipher_suite.decrypt(encrypted_key)
    return decrypted_key.decode()
def load_key():
    try:
        with open("key.key", 'rb') as filekey:
            key = filekey.read()
    except FileNotFoundError:
        key = Fernet.generate_key()
        with open("key.key", 'wb') as filekey:
            filekey.write(key)
    return key
settings = QSettings("settings.ini", QSettings.IniFormat)
top = int(settings.value("top"))
class Ui_Form(object):
    def setupUi(self, Form):
        Form.setObjectName("Form")
        Form.resize(392, 488)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icon1.jpeg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        Form.setWindowIcon(icon)
        self.reset_btn = QtWidgets.QPushButton(Form)
        self.reset_btn.setGeometry(QtCore.QRect(20, 99, 91, 25))
        self.reset_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #ff0066;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #cc0052;\n"
"}")
        self.reset_btn.setObjectName("reset_btn")
        self.label_2 = QtWidgets.QLabel(Form)
        self.label_2.setGeometry(QtCore.QRect(120, 105, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.save_btn = QtWidgets.QPushButton(Form)
        self.save_btn.setGeometry(QtCore.QRect(317, 67, 61, 25))
        self.save_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #0d6efd;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #3399ff;\n"
"}")
        self.save_btn.setObjectName("save_btn")
        self.top_check = QtWidgets.QCheckBox(Form)
        self.top_check.setGeometry(QtCore.QRect(284, 102, 101, 21))
        self.top_check.setObjectName("top_check")
        self.model_combo = QtWidgets.QComboBox(Form)
        self.model_combo.setGeometry(QtCore.QRect(170, 100, 101, 24))
        self.model_combo.setObjectName("model_combo")
        self.model_combo.addItem("")
        self.model_combo.addItem("")
        self.api_key = QtWidgets.QLineEdit(Form)
        self.api_key.setGeometry(QtCore.QRect(16, 68, 291, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.api_key.setFont(font)
        self.api_key.setStyleSheet("QLineEdit{\n"
"    border-radius: 10px;\n"
"    }")
        self.api_key.setEchoMode(QtWidgets.QLineEdit.Password)
        self.api_key.setObjectName("api_key")
        self.label = QtWidgets.QLabel(Form)
        self.label.setGeometry(QtCore.QRect(16, 48, 81, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.prompts = QtWidgets.QGroupBox(Form)
        self.prompts.setGeometry(QtCore.QRect(16, 130, 361, 321))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.prompts.setFont(font)
        self.prompts.setStyleSheet("\n"
"")
        self.prompts.setTitle("")
        self.prompts.setObjectName("prompts")
        self.prompt_line = QtWidgets.QLineEdit(self.prompts)
        self.prompt_line.setGeometry(QtCore.QRect(80, 14, 191, 24))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.prompt_line.setFont(font)
        self.prompt_line.setStyleSheet("QLineEdit{\n"
"    border-radius: 10px;\n"
"    }")
        self.prompt_line.setEchoMode(QtWidgets.QLineEdit.Normal)
        self.prompt_line.setObjectName("prompt_line")
        self.label_3 = QtWidgets.QLabel(self.prompts)
        self.label_3.setGeometry(QtCore.QRect(22, 19, 41, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.prompts)
        self.label_4.setGeometry(QtCore.QRect(10, 49, 65, 16))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.add_btn = QtWidgets.QPushButton(self.prompts)
        self.add_btn.setGeometry(QtCore.QRect(31, 99, 71, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.add_btn.setFont(font)
        self.add_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #0d6efd;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #3399ff;\n"
"}")
        self.add_btn.setObjectName("add_btn")
        self.table = QtWidgets.QTableWidget(self.prompts)
        self.table.setGeometry(QtCore.QRect(10, 130, 341, 181))
        self.table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.table.setObjectName("table")
        self.table.setColumnCount(2)
        self.table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.table.setHorizontalHeaderItem(1, item)
        self.table.horizontalHeader().setDefaultSectionSize(169)
        self.table.setSelectionBehavior(1)
        self.edit_btn = QtWidgets.QPushButton(self.prompts)
        self.edit_btn.setEnabled(True)
        self.edit_btn.setGeometry(QtCore.QRect(147, 99, 71, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.edit_btn.setFont(font)
        self.edit_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #33cc33;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #2eb82e;\n"
"}")
        self.edit_btn.setObjectName("edit_btn")
        self.del_btn = QtWidgets.QPushButton(self.prompts)
        self.del_btn.setGeometry(QtCore.QRect(260, 99, 71, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.del_btn.setFont(font)
        self.del_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #ff0000;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #e60000;\n"
"}")
        self.del_btn.setObjectName("del_btn")
        self.description = QtWidgets.QTextEdit(self.prompts)
        self.description.setGeometry(QtCore.QRect(80, 50, 271, 41))
        self.description.setStyleSheet("QTextEdit{\n"
"    border-radius: 10px;\n"
"}")
        self.description.setObjectName("description")
        self.ok_btn = QtWidgets.QPushButton(Form)
        self.ok_btn.setGeometry(QtCore.QRect(210, 459, 71, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.ok_btn.setFont(font)
        self.ok_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #668cff;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #3399ff;\n"
"}")
        self.ok_btn.setObjectName("ok_btn")
        self.cancel_btn = QtWidgets.QPushButton(Form)
        self.cancel_btn.setGeometry(QtCore.QRect(300, 459, 71, 22))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.cancel_btn.setFont(font)
        self.cancel_btn.setStyleSheet("QPushButton{\n"
"    color: white;\n"
"    background-color: #668cff;\n"
"    border-radius: 10px;\n"
"}\n"
"QPushButton:hover {\n"
"    background-color: #3399ff;\n"
"}")
        self.cancel_btn.setObjectName("cancel_btn")
        self.header = QtWidgets.QLabel(Form)
        self.header.setGeometry(QtCore.QRect(0, 0, 392, 41))
        self.header.setStyleSheet("background-color: #d1d1e0;\n"
"")
        self.header.setObjectName("header")

        self.retranslateUi(Form)
        self.ok_btn.clicked['bool'].connect(Form.close) # type: ignore
        self.cancel_btn.clicked.connect(Form.close) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(Form)

        # ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        enc = open("encrypt", 'br')
        encrypted_key = enc.read()
        self.key = load_key()
        decrypted_key = decrypt_api_key(encrypted_key, self.key)
        self.api_key.setText(decrypted_key)

        self.ok_btn.clicked.connect(self.save_setting)
        self.add_btn.clicked.connect(self.add_table)
        self.del_btn.clicked.connect(self.delete_prompt)
        self.edit_btn.clicked.connect(self.edit_prompt)
        self.save_btn.clicked.connect(self.save_api)
        self.reset_btn.clicked.connect(self.reset)
        self.settings = QSettings("settings.ini", QSettings.IniFormat)
        self.model_combo.setCurrentIndex(int(self.settings.value("number")))
        top = int(self.settings.value("top"))
        if top == 1:
            self.top_check.setChecked(True)
        else:
            self.top_check.setChecked(False)
        self.table.verticalHeader().setVisible(False)

        dbFile = open('prompts', 'rb') 
        db = pickle.load(dbFile)
        row = len(db)
        self.table.setRowCount(row)
        row = 0
        for keys in db:
            item_p = QTableWidgetItem(keys)
            item_d = QTableWidgetItem(db[keys])
            self.table.setItem(row, 0, item_p)
            self.table.setItem(row, 1, item_d)
            row += 1
        dbFile.close()
        self.table.hideRow(0)
        self.del_btn.setDisabled(True)
        self.edit_btn.setDisabled(True)
        self.table.itemSelectionChanged.connect(self.handle_selection_changed)
    
    def reset(self):
        self.api_key.setText("")

    def handle_selection_changed(self):
        selected_rows = self.table.selectedItems()
        if selected_rows:
            row = selected_rows[0].row()
            self.del_btn.setEnabled(True)
            self.edit_btn.setEnabled(True)
            self.prompt_line.setText(self.table.item(row, 0).text())
            self.description.setPlainText(self.table.item(row, 1).text())
            self.currentSelectedRow = row

    def save_api(self):
        api_key = self.api_key.text()
        encrypted_key = encrypt_api_key(api_key, self.key)
        encrypted = open("encrypt", 'bw')
        encrypted.write(encrypted_key)
        encrypted.close()

    def add_table(self):
        prompt = self.prompt_line.text()
        description = self.description.toPlainText()
        row_count = self.table.rowCount()
        check = check_prompt(self.prompt_line.text())
        if prompt == "":
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Please write prompt.")
            msgBox.setWindowTitle("Prompt nothing!")
            msgBox.exec_()
        if check == False:
            msgBox = QMessageBox()
            msgBox.setIcon(QMessageBox.Critical)
            msgBox.setText("Please write prompt again.")
            msgBox.setWindowTitle("Prompt repeat!")
            msgBox.exec_()
        else:
            self.table.insertRow(row_count)
            item_p = QTableWidgetItem(prompt)
            item_d = QTableWidgetItem(description)
            self.table.setItem(row_count, 0, item_p)
            self.table.setItem(row_count, 1, item_d)
            self.description.clear()
        self.prompt_line.clear()


    def save_setting(self):
        model = int(self.model_combo.currentIndex())
        if self.top_check.isChecked() == True:
            top = 1
        else:
            top = 0
        self.settings.setValue("number", model)
        self.settings.setValue("top", top)
        self.settings.sync()
        store_prompts(self.table)
        api_key = self.api_key.text()
        encrypted_key = encrypt_api_key(api_key, self.key)
        encrypted = open("encrypt", 'bw')
        encrypted.write(encrypted_key)
        encrypted.close()
        # settingW = QtWidgets.QDialog()
        # if top:  # Window will be set always on top only when this flag is true
        #     settingW.setWindowFlags(QtCore.Qt.WindowStaysOnTopHint)
        # ui = gpt.Ui_Form()
        # ui.setupUi(settingW)
        # settingW.exec_()

    def delete_prompt(self):
        self.table.removeRow(self.currentSelectedRow)

    def edit_prompt(self):
        old_prompt = self.table.item(self.currentSelectedRow, 0).text()   
        if old_prompt == self.prompt_line.text():
            item_d = QTableWidgetItem(self.description.toPlainText())
            self.table.setItem(self.currentSelectedRow, 1, item_d)
        else:
            check = check_prompt(self.prompt_line.text())
            check = True
            if self.prompt_line.text() == "":
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Critical)
                msgBox.setText("Please write prompt.")
                msgBox.setWindowTitle("Prompt nothing!")
                msgBox.exec_()
            if check == False:
                msgBox = QMessageBox()
                msgBox.setIcon(QMessageBox.Critical)
                msgBox.setText("Please write prompt again.")
                msgBox.setWindowTitle("Prompt repeat!")
                msgBox.exec_()
            else:            
                item_p = QTableWidgetItem(self.prompt_line.text())
                self.table.setItem(self.currentSelectedRow, 0, item_p)
                item_d = QTableWidgetItem(self.description.toPlainText())
                self.table.setItem(self.currentSelectedRow, 1, item_d)

    def retranslateUi(self, Form):
        _translate = QtCore.QCoreApplication.translate
        Form.setWindowTitle(_translate("Form", "Setting"))
        self.reset_btn.setText(_translate("Form", "Reset API-key"))
        self.label_2.setText(_translate("Form", "Models"))
        self.save_btn.setText(_translate("Form", "Save"))
        self.top_check.setText(_translate("Form", "Always on top"))
        self.model_combo.setItemText(0, _translate("Form", "GPT-4"))
        self.model_combo.setItemText(1, _translate("Form", "GPT-3.5-Turbo"))
        self.label.setText(_translate("Form", "Enter API-key"))
        self.label_3.setText(_translate("Form", "Prompt"))
        self.label_4.setText(_translate("Form", "Description"))
        self.add_btn.setText(_translate("Form", "Add"))
        item = self.table.horizontalHeaderItem(0)
        self.table.setColumnWidth(0,55) #modify__________________________________________________
        self.table.setColumnWidth(1,265)
        item.setText(_translate("Form", "Prompt"))
        item = self.table.horizontalHeaderItem(1)
        item.setText(_translate("Form", "Description"))
        self.edit_btn.setText(_translate("Form", "Edit"))
        self.del_btn.setText(_translate("Form", "Delete"))
        self.ok_btn.setText(_translate("Form", "Ok"))
        self.cancel_btn.setText(_translate("Form", "Cancel"))
        self.header.setText(_translate("Form", "<html><head/><body><p align=\"center\"><span style=\" font-size:12pt; color:#f9f9f9;\">Setting</span></p></body></html>"))

def store_prompts(table):      
        # db = open('prompts', 'wb')
    prompts = {}
    for row in range(table.rowCount()):
        key = table.item(row, 0).text()
        value = table.item(row, 1).text()
        prompts[key] = value
    with open('prompts', 'wb') as db:
        pickle.dump(prompts, db)

def check_prompt(prompt):
    with open('prompts', 'rb') as file:
        prompts = pickle.load(file)
        keys = prompts.keys()
        if prompt in keys:
            return False        
        return True
    
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Form = QtWidgets.QWidget()
    ui = Ui_Form()
    ui.setupUi(Form)
    Form.show()
    sys.exit(app.exec_())
